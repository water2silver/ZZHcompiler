declare i32 @TOKEN_NUM = 0
declare i32 @TOKEN_OTHER = 1
declare i32 @last_char = 32
declare i32 @num
declare i32 @other
declare i32 @cur_token
define i32 @next_char() {
	declare i32 %l6
	declare i32 %t7
.L1:
	entry
	%t7 = call i32 @getch()
	@last_char = %t7
	%l6 = @last_char
	br label .L2
.L2:
	exit %l6
}
define i32 @is_space(i32 %t10) {
	declare i32 %l8
	declare i32 %l9 ; variable: c
	declare i1 %t11
	declare i1 %t12
.L3:
	entry
	%l9 = %t10
	%t11 = icmp eq %l9, 32
	bc %t11, label .L5, label .L8
.L8:
	%t12 = icmp eq %l9, 10
	bc %t12, label .L5, label .L6
.L5:
	%l8 = 1
	br label .L4
	br label .L7
.L6:
	%l8 = 0
	br label .L4
.L7:
.L4:
	exit %l8
}
define i32 @is_num(i32 %t15) {
	declare i32 %l13
	declare i32 %l14 ; variable: c
	declare i1 %t16
	declare i1 %t17
.L9:
	entry
	%l14 = %t15
	%t16 = icmp ge %l14, 48
	bc %t16, label .L14, label .L12
.L14:
	%t17 = icmp le %l14, 57
	bc %t17, label .L11, label .L12
.L11:
	%l13 = 1
	br label .L10
	br label .L13
.L12:
	%l13 = 0
	br label .L10
.L13:
.L10:
	exit %l13
}
define i32 @next_token() {
	declare i32 %l18
	declare i32 %t19
	declare i1 %t20
	declare i32 %t21
	declare i32 %t22
	declare i1 %t23
	declare i32 %t24
	declare i32 %t25
	declare i32 %t26
	declare i1 %t27
	declare i32 %t28
	declare i32 %t29
	declare i32 %t30
	declare i32 %t31
.L15:
	entry
.L17:
	%t19 = call i32 @is_space(i32 @last_char)
	%t20 = icmp ne %t19, 0
	bc %t20, label .L18, label .L19
.L18:
	%t21 = call i32 @next_char()
	br label .L17
.L19:
	%t22 = call i32 @is_num(i32 @last_char)
	%t23 = icmp ne %t22, 0
	bc %t23, label .L20, label .L21
.L20:
	%t24 = sub @last_char, 48
	@num = %t24
.L23:
	%t25 = call i32 @next_char()
	%t26 = call i32 @is_num(i32 %t25)
	%t27 = icmp ne %t26, 0
	bc %t27, label .L24, label .L25
.L24:
	%t28 = mul @num, 10
	%t29 = add %t28, @last_char
	%t30 = sub %t29, 48
	@num = %t30
	br label .L23
.L25:
	@cur_token = @TOKEN_NUM
	br label .L22
.L21:
	@other = @last_char
	%t31 = call i32 @next_char()
	@cur_token = @TOKEN_OTHER
.L22:
	%l18 = @cur_token
	br label .L16
.L16:
	exit %l18
}
define i32 @panic() {
	declare i32 %l32
.L26:
	entry
	call void @putch(i32 112)
	call void @putch(i32 97)
	call void @putch(i32 110)
	call void @putch(i32 105)
	call void @putch(i32 99)
	call void @putch(i32 33)
	call void @putch(i32 10)
	%l32 = -1
	br label .L27
.L27:
	exit %l32
}
define i32 @get_op_prec(i32 %t35) {
	declare i32 %l33
	declare i32 %l34 ; variable: op
	declare i1 %t36
	declare i1 %t37
	declare i1 %t38
	declare i1 %t39
	declare i1 %t40
.L28:
	entry
	%l34 = %t35
	%t36 = icmp eq %l34, 43
	bc %t36, label .L30, label .L33
.L33:
	%t37 = icmp eq %l34, 45
	bc %t37, label .L30, label .L31
.L30:
	%l33 = 10
	br label .L29
.L31:
.L32:
	%t38 = icmp eq %l34, 42
	bc %t38, label .L34, label .L38
.L38:
	%t39 = icmp eq %l34, 47
	bc %t39, label .L34, label .L37
.L37:
	%t40 = icmp eq %l34, 37
	bc %t40, label .L34, label .L35
.L34:
	%l33 = 20
	br label .L29
.L35:
.L36:
	%l33 = 0
	br label .L29
.L29:
	exit %l33
}
define void @stack_push(i32 %t43[0], i32 %t45) {
	declare i32 %l42[0] ; variable: s
	declare i32 %l44 ; variable: v
	declare i32 %t46
	declare i32* %t47
	declare i32 %t48
	declare i32* %t49
	declare i32 %t50
	declare i32 %t51
	declare i32 %t52
	declare i32 %t53
	declare i32* %t54
	declare i32 %t55
	declare i32* %t56
.L39:
	entry
	%l42 = %t43
	%l44 = %t45
	%t48 = mul 0, 4
	%t49 = add %l42, %t48
	%t50 = *%t49
	%t51 = add %t50, 1
	%t46 = mul 0, 4
	%t47 = add %l42, %t46
	*%t47 = %t51
	%t53 = mul 0, 4
	%t54 = add %l42, %t53
	%t55 = *%t54
	%t52 = mul %t55, 4
	%t56 = add %l42, %t52
	*%t56 = %l44
.L40:
	exit
}
define i32 @stack_pop(i32 %t59[0]) {
	declare i32 %l57
	declare i32 %l58[0] ; variable: s
	declare i32 %l60 ; variable: last
	declare i32 %t61
	declare i32 %t62
	declare i32* %t63
	declare i32 %t64
	declare i32* %t65
	declare i32 %t66
	declare i32 %t67
	declare i32* %t68
	declare i32 %t69
	declare i32* %t70
	declare i32 %t71
	declare i32 %t72
.L41:
	entry
	%l58 = %t59
	%t62 = mul 0, 4
	%t63 = add %l58, %t62
	%t64 = *%t63
	%t61 = mul %t64, 4
	%t65 = add %l58, %t61
	%t66 = *%t65
	%l60 = %t66
	%t69 = mul 0, 4
	%t70 = add %l58, %t69
	%t71 = *%t70
	%t72 = sub %t71, 1
	%t67 = mul 0, 4
	%t68 = add %l58, %t67
	*%t68 = %t72
	%l57 = %l60
	br label .L42
.L42:
	exit %l57
}
define i32 @stack_peek(i32 %t75[0]) {
	declare i32 %l73
	declare i32 %l74[0] ; variable: s
	declare i32 %t76
	declare i32 %t77
	declare i32* %t78
	declare i32 %t79
	declare i32* %t80
	declare i32 %t81
.L43:
	entry
	%l74 = %t75
	%t77 = mul 0, 4
	%t78 = add %l74, %t77
	%t79 = *%t78
	%t76 = mul %t79, 4
	%t80 = add %l74, %t76
	%t81 = *%t80
	%l73 = %t81
	br label .L44
.L44:
	exit %l73
}
define i32 @stack_size(i32 %t84[0]) {
	declare i32 %l82
	declare i32 %l83[0] ; variable: s
	declare i32 %t85
	declare i32* %t86
	declare i32 %t87
.L45:
	entry
	%l83 = %t84
	%t85 = mul 0, 4
	%t86 = add %l83, %t85
	%t87 = *%t86
	%l82 = %t87
	br label .L46
.L46:
	exit %l82
}
define i32 @eval_op(i32 %t90, i32 %t92, i32 %t94) {
	declare i32 %l88
	declare i32 %l89 ; variable: op
	declare i32 %l91 ; variable: lhs
	declare i32 %l93 ; variable: rhs
	declare i1 %t95
	declare i32 %t96
	declare i1 %t97
	declare i32 %t98
	declare i1 %t99
	declare i32 %t100
	declare i1 %t101
	declare i32 %t102
	declare i1 %t103
	declare i32 %t104
	declare i32 %t105
	declare i32 %t106
.L47:
	entry
	%l89 = %t90
	%l91 = %t92
	%l93 = %t94
	%t95 = icmp eq %l89, 43
	bc %t95, label .L49, label .L50
.L49:
	%t96 = add %l91, %l93
	%l88 = %t96
	br label .L48
.L50:
.L51:
	%t97 = icmp eq %l89, 45
	bc %t97, label .L52, label .L53
.L52:
	%t98 = sub %l91, %l93
	%l88 = %t98
	br label .L48
.L53:
.L54:
	%t99 = icmp eq %l89, 42
	bc %t99, label .L55, label .L56
.L55:
	%t100 = mul %l91, %l93
	%l88 = %t100
	br label .L48
.L56:
.L57:
	%t101 = icmp eq %l89, 47
	bc %t101, label .L58, label .L59
.L58:
	%t102 = div %l91, %l93
	%l88 = %t102
	br label .L48
.L59:
.L60:
	%t103 = icmp eq %l89, 37
	bc %t103, label .L61, label .L62
.L61:
	%t105 = div %l91, %l93
	%t106 = mul %t105, %l93
	%t104 = sub %l91, %t106
	%l88 = %t104
	br label .L48
.L62:
.L63:
	%l88 = 0
	br label .L48
.L48:
	exit %l88
}
define i32 @eval() {
	declare i32 %l107
	declare i32 %l108[256] ; variable: oprs
	declare i32 %l109[256] ; variable: ops
	declare i32 %l114 ; variable: op
	declare i32 %l124 ; variable: cur_op
	declare i32 %l126 ; variable: rhs
	declare i32 %l128 ; variable: lhs
	declare i32 %l137 ; variable: cur_op
	declare i32 %l139 ; variable: rhs
	declare i32 %l141 ; variable: lhs
	declare i1 %t110
	declare i32 %t111
	declare i32 %t112
	declare i1 %t113
	declare i32 %t115
	declare i1 %t116
	declare i32 %t117
	declare i32 %t118
	declare i1 %t119
	declare i32 %t120
	declare i32 %t121
	declare i32 %t122
	declare i1 %t123
	declare i32 %t125
	declare i32 %t127
	declare i32 %t129
	declare i32 %t130
	declare i1 %t131
	declare i32 %t132
	declare i32 %t133
	declare i32 %t134
	declare i32 %t135
	declare i1 %t136
	declare i32 %t138
	declare i32 %t140
	declare i32 %t142
	declare i32 %t143
	declare i32 %t144
.L64:
	entry
	%t110 = icmp eq @cur_token, @TOKEN_NUM
	bc %t110, label .L67, label .L66
.L66:
	%t111 = call i32 @panic()
	%l107 = %t111
	br label .L65
.L67:
.L68:
	call void @stack_push(i32 %l108[256], i32 @num)
	%t112 = call i32 @next_token()
.L69:
	%t113 = icmp eq @cur_token, @TOKEN_OTHER
	bc %t113, label .L70, label .L71
.L70:
	%l114 = @other
	%t115 = call i32 @get_op_prec(i32 %l114)
	%t116 = icmp ne %t115, 0
	bc %t116, label .L73, label .L72
.L72:
	br label .L71
.L73:
.L74:
	%t117 = call i32 @next_token()
.L75:
	%t118 = call i32 @stack_size(i32 %l109[256])
	%t119 = icmp ne %t118, 0
	bc %t119, label .L78, label .L77
.L78:
	%t120 = call i32 @stack_peek(i32 %l109[256])
	%t121 = call i32 @get_op_prec(i32 %t120)
	%t122 = call i32 @get_op_prec(i32 %l114)
	%t123 = icmp ge %t121, %t122
	bc %t123, label .L76, label .L77
.L76:
	%t125 = call i32 @stack_pop(i32 %l109[256])
	%l124 = %t125
	%t127 = call i32 @stack_pop(i32 %l108[256])
	%l126 = %t127
	%t129 = call i32 @stack_pop(i32 %l108[256])
	%l128 = %t129
	%t130 = call i32 @eval_op(i32 %l124, i32 %l128, i32 %l126)
	call void @stack_push(i32 %l108[256], i32 %t130)
	br label .L75
.L77:
	call void @stack_push(i32 %l109[256], i32 %l114)
	%t131 = icmp eq @cur_token, @TOKEN_NUM
	bc %t131, label .L80, label .L79
.L79:
	%t132 = call i32 @panic()
	%l107 = %t132
	br label .L65
.L80:
.L81:
	call void @stack_push(i32 %l108[256], i32 @num)
	%t133 = call i32 @next_token()
	br label .L69
.L71:
	%t134 = call i32 @next_token()
.L82:
	%t135 = call i32 @stack_size(i32 %l109[256])
	%t136 = icmp ne %t135, 0
	bc %t136, label .L83, label .L84
.L83:
	%t138 = call i32 @stack_pop(i32 %l109[256])
	%l137 = %t138
	%t140 = call i32 @stack_pop(i32 %l108[256])
	%l139 = %t140
	%t142 = call i32 @stack_pop(i32 %l108[256])
	%l141 = %t142
	%t143 = call i32 @eval_op(i32 %l137, i32 %l141, i32 %l139)
	call void @stack_push(i32 %l108[256], i32 %t143)
	br label .L82
.L84:
	%t144 = call i32 @stack_peek(i32 %l108[256])
	%l107 = %t144
	br label .L65
.L65:
	exit %l107
}
define i32 @main() {
	declare i32 %l145
	declare i32 %l146 ; variable: count
	declare i32 %t147
	declare i32 %t148
	declare i32 %t149
	declare i32 %t150
	declare i1 %t151
	declare i32 %t152
	declare i32 %t153
.L85:
	entry
	%t147 = call i32 @getint()
	%l146 = %t147
	%t148 = call i32 @getch()
	%t149 = call i32 @next_token()
.L87:
	%t150 = %l146
	%t151 = icmp ne %t150, 0
	bc %t151, label .L88, label .L89
.L88:
	%t152 = call i32 @eval()
	call void @putint(i32 %t152)
	call void @putch(i32 10)
	%t153 = sub %l146, 1
	%l146 = %t153
	br label .L87
.L89:
	%l145 = 0
	br label .L86
.L86:
	exit %l145
}
